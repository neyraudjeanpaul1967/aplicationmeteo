/**
 * API V√âRIFICATION SESSION STRIPE - TRAITEMENT POST-PAIEMENT
 *
 * Cette API v√©rifie et traite les sessions de paiement Stripe apr√®s redirection.
 * Elle est appel√©e sur la page de succ√®s pour confirmer le paiement et activer le premium.
 *
 * Fonctionnalit√©s:
 * - R√©cup√©ration et v√©rification de la session Stripe
 * - Activation automatique du statut premium apr√®s paiement
 * - Gestion de l'abonnement mensuel (30 jours)
 * - Mise √† jour du customer ID Stripe
 * - Recherche d'utilisateur par m√©tadonn√©es ou email
 *
 * Param√®tres (URL dynamique):
 * - session_id (string): ID de la session Stripe retourn√©e apr√®s paiement
 *
 * R√©ponses:
 * - 200: Session v√©rifi√©e avec succ√®s
 *   - session (object): Donn√©es de la session Stripe
 *   - user_updated (boolean): Statut de mise √† jour utilisateur
 *   - premium_expires_at (string): Date d'expiration du premium
 * - 400: Session ID manquant
 * - 405: M√©thode HTTP non autoris√©e (seul GET accept√©)
 * - 500: Erreur Stripe ou base de donn√©es
 *
 * Workflow:
 * 1. R√©cup√©ration de la session depuis Stripe
 * 2. V√©rification du statut de paiement
 * 3. Identification de l'utilisateur (m√©tadonn√©es ou email)
 * 4. Calcul de la date d'expiration (30 jours)
 * 5. Mise √† jour du profil utilisateur
 *
 * S√©curit√©:
 * - V√©rification c√¥t√© serveur avec Stripe
 * - Utilisation de supabaseAdmin pour les mises √† jour
 * - Validation du statut de paiement avant activation
 */

import { stripe } from "../../../lib/stripe";
import { supabaseAdmin } from "../../../lib/supabaseAdmin";

export default async function handler(req, res) {
  console.log(
    "üîç API V√©rification Session - D√©marrage avec session_id:",
    req.query.session_id
  );

  // === VALIDATION DE LA M√âTHODE HTTP ===
  if (req.method !== "GET") {
    console.log("‚ùå M√©thode non autoris√©e:", req.method);
    return res.status(405).json({
      message: "Method not allowed",
      allowed: "GET",
      received: req.method,
    });
  }

  // === EXTRACTION ET VALIDATION DES PARAM√àTRES ===
  const { session_id } = req.query;

  if (!session_id) {
    console.log("‚ùå Session ID manquant dans la requ√™te");
    return res.status(400).json({
      message: "Session ID is required",
      parameter: "session_id",
    });
  }

  try {
    // === R√âCUP√âRATION DE LA SESSION STRIPE ===
    console.log("üì° R√©cup√©ration session depuis Stripe...");
    const session = await stripe.checkout.sessions.retrieve(session_id);

    console.log("‚úÖ Session Stripe r√©cup√©r√©e:", {
      id: session.id,
      payment_status: session.payment_status,
      customer_email: session.customer_email,
      amount_total: session.amount_total,
      currency: session.currency,
      created: new Date(session.created * 1000).toISOString(),
      metadata: session.metadata,
    });

    // === TRAITEMENT DU PAIEMENT R√âUSSI ===
    if (session.payment_status === "paid") {
      console.log("üí∞ Paiement confirm√©, mise √† jour du statut utilisateur...");

      // === IDENTIFICATION DE L'UTILISATEUR ===
      let userId = session.metadata?.user_id;
      console.log("üë§ User ID depuis m√©tadonn√©es:", userId);

      // Recherche par email si pas d'ID dans les m√©tadonn√©es
      if (!userId && session.customer_email) {
        console.log(
          "üìß Pas d'user_id, recherche par email:",
          session.customer_email
        );

        const { data: userData } = await supabaseAdmin
          .from("user")
          .select("id")
          .eq("email", session.customer_email)
          .single();

        console.log("üîç R√©sultat recherche utilisateur:", userData);

        if (userData) {
          userId = userData.id;
          console.log("‚úÖ Utilisateur trouv√© par email, ID:", userId);
        } else {
          console.log("‚ö†Ô∏è Aucun utilisateur trouv√© avec cet email");
        }
      }

      // === MISE √Ä JOUR DU STATUT PREMIUM ===
      if (userId) {
        console.log("üîÑ Mise √† jour statut premium utilisateur...");

        // === CALCUL DE LA DATE D'EXPIRATION ===
        // Abonnement mensuel : 30 jours √† partir de maintenant
        const premiumExpiresAt = new Date();
        premiumExpiresAt.setDate(premiumExpiresAt.getDate() + 30); // 30 jours

        console.log("üìÖ Date d'expiration calcul√©e:", {
          current_date: new Date().toISOString(),
          expires_at: premiumExpiresAt.toISOString(),
          duration_days: 30,
        });

        // === PR√âPARATION DES DONN√âES DE MISE √Ä JOUR ===
        const updateData = {
          is_premium: true, // Activation du statut premium
          premium_expires_at: premiumExpiresAt.toISOString(), // Date d'expiration
          stripe_customer_id: session.customer, // ID client Stripe pour futurs paiements
        };

        console.log("üíæ Donn√©es de mise √† jour:", updateData);

        // === EX√âCUTION DE LA MISE √Ä JOUR ===
        const { error: updateError } = await supabaseAdmin
          .from("user")
          .update(updateData)
          .eq("id", userId);

        // Gestion des erreurs de mise √† jour
        if (updateError) {
          console.error("‚ùå Erreur mise √† jour Supabase:", updateError);

          // On continue malgr√© l'erreur pour retourner les infos de session
          return res.status(200).json({
            session: {
              id: session.id,
              payment_status: session.payment_status,
              customer_email: session.customer_email,
              amount_total: session.amount_total,
            },
            user_updated: false,
            error: "Erreur lors de la mise √† jour du profil utilisateur",
            details: updateError.message,
          });
        } else {
          console.log(
            `‚úÖ Utilisateur ${userId} mis √† jour premium jusqu'au ${premiumExpiresAt.toISOString()}`
          );
        }

        // === RETOUR DE SUCC√àS AVEC MISE √Ä JOUR ===
        return res.status(200).json({
          status: "complete",
          session: {
            id: session.id,
            payment_status: session.payment_status,
            customer_email: session.customer_email,
            amount_total: session.amount_total,
            currency: session.currency,
          },
          user_updated: true,
          user_id: userId,
          premium_expires_at: premiumExpiresAt.toISOString(),
          stripe_customer_id: session.customer,
          message: "Statut premium activ√© avec succ√®s",
        });
      } else {
        // === AUCUN UTILISATEUR TROUV√â ===
        console.log("‚ùå Aucun utilisateur trouv√© pour ce paiement");

        return res.status(200).json({
          status: "complete",
          session: {
            id: session.id,
            payment_status: session.payment_status,
            customer_email: session.customer_email,
            amount_total: session.amount_total,
          },
          user_updated: false,
          error: "Utilisateur non trouv√©",
          message: "Paiement confirm√© mais utilisateur non identifi√©",
        });
      }
    } else {
      // === PAIEMENT NON CONFIRM√â ===
      console.log("‚è≥ Paiement non finalis√©, statut:", session.payment_status);

      return res.status(200).json({
        status: "pending",
        session: {
          id: session.id,
          payment_status: session.payment_status,
          customer_email: session.customer_email,
        },
        user_updated: false,
        message: `Paiement en cours: ${session.payment_status}`,
      });
    }
  } catch (error) {
    // === GESTION GLOBALE DES ERREURS ===
    console.error("üí• Erreur g√©n√©rale v√©rification session:", error);

    return res.status(500).json({
      status: "error",
      error: "Erreur serveur lors de la v√©rification",
      details: error.message,
      session_id: req.query.session_id,
      timestamp: new Date().toISOString(),
    });
  }
}
