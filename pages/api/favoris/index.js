/**
 * API FAVORIS - GESTION DES VILLES FAVORITES
 *
 * Cette API g√®re toutes les op√©rations CRUD pour les villes favorites.
 * Elle impl√©mente la logique m√©tier pour la limitation des favoris
 * (3 villes max pour utilisateurs gratuits).
 *
 * Endpoints support√©s:
 * - GET: R√©cup√©rer la liste des favoris d'un utilisateur
 * - POST: Ajouter une nouvelle ville aux favoris
 * - DELETE: Supprimer une ville des favoris
 *
 * Param√®tres:
 * - userId (string): Identifiant unique de l'utilisateur
 * - ville (string): Nom de la ville (pour POST/DELETE)
 *
 * R√©ponses:
 * - 200: Succ√®s avec donn√©es
 * - 400: Erreur de validation (limite atteinte, doublon, etc.)
 * - 500: Erreur serveur
 * - 503: Table non configur√©e
 *
 * S√©curit√©:
 * - Utilise supabaseAdmin pour contourner RLS
 * - Validation des param√®tres d'entr√©e
 * - Gestion des erreurs SQL appropri√©e
 */

import { supabaseAdmin } from "../../../lib/supabaseAdmin";

export default async function handler(req, res) {
  // Logs de debug pour tracer les requ√™tes
  console.log("\n=== API FAVORIS CORRIG√âE ===");
  console.log("Method:", req.method);
  console.log("Body:", req.body);
  console.log("Query:", req.query);

  const { method } = req;

  try {
    // === V√âRIFICATION DE L'EXISTENCE DE LA TABLE ===
    // Essentiel pour √©viter les erreurs si la base n'est pas configur√©e
    console.log("1. Test existence table favorie...");
    const { data: testData, error: testError } = await supabaseAdmin
      .from("favorie")
      .select("id")
      .limit(1);

    // Gestion sp√©cifique de l'erreur "table inexistante"
    if (testError && testError.code === "PGRST116") {
      console.log("2. ‚ö†Ô∏è Table favorie n'existe pas");
      return res.status(503).json({
        error: "Setup required",
        message: "La table favorie doit √™tre cr√©√©e dans Supabase",
        needsSetup: true,
      });
    }

    // Gestion des autres erreurs de base de donn√©es
    if (testError) {
      console.error("3. Erreur inattendue:", testError);
      return res.status(500).json({ error: testError.message });
    }

    console.log("2. ‚úÖ Table favorie existe");

    // === ROUTAGE SELON LA M√âTHODE HTTP ===
    switch (method) {
      // -------------------------------
      // GET - R√âCUP√âRER LES FAVORIS
      // -------------------------------
      case "GET": {
        // R√©cup√©ration de l'ID utilisateur depuis les param√®tres de requ√™te
        const { userId } = req.query;

        console.log("3. üìñ GET favoris pour userId:", userId);

        // Pr√©paration de la requ√™te de base avec tri chronologique
        let query = supabaseAdmin
          .from("favorie")
          .select("*")
          .order("created_at", { ascending: false }); // Plus r√©cent en premier

        // Si userId est fourni, filtrer par utilisateur sp√©cifique
        if (userId) {
          query = query.eq("user_id", userId);
        }

        // Ex√©cution de la requ√™te
        const { data: favoris, error: getFavorisError } = await query;

        // Gestion d'erreur base de donn√©es
        if (getFavorisError) {
          console.error("4. Erreur GET:", getFavorisError);
          return res.status(500).json({ error: getFavorisError.message });
        }

        // Retour des donn√©es avec logs de debug
        console.log(
          "5. ‚úÖ GET r√©ussi:",
          favoris?.length || 0,
          "favoris trouv√©s"
        );
        return res.status(200).json({ data: favoris || [] });
      }

      // -------------------------------
      // POST - AJOUTER AUX FAVORIS
      // -------------------------------
      case "POST": {
        // Extraction des param√®tres depuis le body de la requ√™te
        const { userId: postUserId, ville } = req.body;

        // Validation des param√®tres obligatoires
        if (!ville) {
          console.log("6. ‚ùå Param√®tre ville manquant");
          return res.status(400).json({
            error: "ville requise",
            received: { postUserId, ville },
          });
        }

        console.log("7. ‚ûï POST nouveau favori:", { postUserId, ville });

        // === V√âRIFICATION DE LA LIMITE (3 FAVORIS MAX) ===
        // Uniquement si un userId est fourni (utilisateur connect√©)
        if (postUserId) {
          console.log("8. üîç V√©rification limite pour userId:", postUserId);

          // Comptage des favoris existants pour cet utilisateur
          const { data: existingFavoris, error: countError } =
            await supabaseAdmin
              .from("favorie")
              .select("id")
              .eq("user_id", postUserId);

          if (countError) {
            console.error("9. Erreur comptage favoris:", countError);
            return res.status(500).json({ error: countError.message });
          }

          // V√©rification de la limite des 3 favoris
          if (existingFavoris && existingFavoris.length >= 3) {
            console.log("10. ‚ö†Ô∏è Limite de 3 favoris atteinte");
            return res.status(400).json({
              error: "Limite de 3 favoris atteinte",
              current_count: existingFavoris.length,
              max_allowed: 3,
            });
          }
        }

        // === PR√âPARATION DES DONN√âES √Ä INS√âRER ===
        const insertData = { ville };
        if (postUserId) {
          insertData.user_id = postUserId;
        }

        console.log("11. üíæ Insertion nouveau favori:", insertData);

        // === INSERTION DU NOUVEAU FAVORI ===
        const { data: newFavori, error: addError } = await supabaseAdmin
          .from("favorie")
          .insert([insertData])
          .select()
          .single();

        // Gestion des erreurs d'insertion
        if (addError) {
          console.error("12. Erreur ajout:", addError);

          // Gestion sp√©cifique de l'erreur de contrainte unique (doublon)
          if (addError.code === "23505") {
            return res.status(400).json({
              error: "Cette ville est d√©j√† en favoris",
              ville: ville,
            });
          }

          return res.status(500).json({ error: addError.message });
        }

        console.log("13. ‚úÖ POST r√©ussi:", newFavori);
        return res.status(201).json({ data: newFavori });
      }

      // -------------------------------
      // DELETE - SUPPRIMER DES FAVORIS
      // -------------------------------
      case "DELETE": {
        // Extraction des param√®tres de suppression
        const {
          userId: deleteUserId,
          ville: deleteVille,
          id: deleteId,
        } = req.body;

        // Validation : au moins un crit√®re de suppression requis
        if (!deleteVille && !deleteId) {
          console.log("14. ‚ùå Crit√®res de suppression manquants");
          return res.status(400).json({
            error: "ville ou id requis pour la suppression",
            received: { deleteUserId, deleteVille, deleteId },
          });
        }

        console.log("15. üóëÔ∏è DELETE favori:", {
          deleteUserId,
          deleteVille,
          deleteId,
        });

        // === CONSTRUCTION DE LA REQU√äTE DE SUPPRESSION ===
        let deleteQuery = supabaseAdmin.from("favorie").delete();

        // Suppression par ID (plus pr√©cis)
        if (deleteId) {
          deleteQuery = deleteQuery.eq("id", deleteId);
        } else {
          // Suppression par nom de ville
          deleteQuery = deleteQuery.eq("ville", deleteVille);

          // Filtrage additionnel par utilisateur si fourni
          if (deleteUserId) {
            deleteQuery = deleteQuery.eq("user_id", deleteUserId);
          }
        }

        // Ex√©cution de la suppression avec retour des donn√©es supprim√©es
        const { data: deletedFavori, error: deleteError } = await deleteQuery
          .select()
          .single();

        // Gestion des erreurs de suppression
        if (deleteError) {
          console.error("16. Erreur suppression:", deleteError);
          return res.status(500).json({ error: deleteError.message });
        }

        // V√©rification que quelque chose a √©t√© supprim√©
        if (!deletedFavori) {
          console.log("17. ‚ö†Ô∏è Aucun favori trouv√© √† supprimer");
          return res.status(404).json({ error: "Favori non trouv√©" });
        }

        console.log("18. ‚úÖ DELETE r√©ussi:", deletedFavori);
        return res.status(200).json({ data: deletedFavori });
      }

      // -------------------------------
      // M√âTHODE NON SUPPORT√âE
      // -------------------------------
      default:
        console.log("19. ‚ùå M√©thode non autoris√©e:", method);
        return res.status(405).json({
          error: "M√©thode non autoris√©e",
          allowed_methods: ["GET", "POST", "DELETE"],
          received: method,
        });
    }
  } catch (error) {
    // === GESTION GLOBALE DES ERREURS ===
    console.error("‚ùå Erreur g√©n√©rale API favoris:", error);
    return res.status(500).json({
      error: "Erreur serveur interne",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
}
