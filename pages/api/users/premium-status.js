/**
 * API STATUT PREMIUM UTILISATEUR - V√âRIFICATION DE L'ABONNEMENT
 *
 * Cette API v√©rifie et retourne le statut premium d'un utilisateur.
 * Elle g√®re automatiquement l'expiration des abonnements premium.
 *
 * Fonctionnalit√©s:
 * - V√©rification du statut premium actuel
 * - Gestion automatique de l'expiration des abonnements
 * - Mise √† jour en temps r√©el du statut si expir√©
 * - Retour de la date d'expiration pour l'affichage
 *
 * Param√®tres (Query):
 * - userId (string): ID de l'utilisateur dont on veut v√©rifier le statut
 *
 * R√©ponses:
 * - 200: Statut r√©cup√©r√© avec succ√®s
 *   - is_premium (boolean): Statut premium actuel (apr√®s v√©rification expiration)
 *   - premium_expires_at (string|null): Date d'expiration ISO ou null
 * - 400: ID utilisateur manquant
 * - 405: M√©thode HTTP non autoris√©e (seul GET accept√©)
 * - 500: Erreur serveur/base de donn√©es
 *
 * Logique m√©tier:
 * - V√©rifie la date d'expiration automatiquement
 * - Met √† jour le statut si l'abonnement a expir√©
 * - Synchronise avec les donn√©es Stripe via webhook
 *
 * Utilisation:
 * - Appel√©e par PremiumStatus.js pour l'affichage
 * - Utilis√©e pour valider l'acc√®s aux fonctionnalit√©s premium
 * - Int√©gr√©e dans le flux d'authentification
 */

import { supabaseAdmin } from "../../../lib/supabaseAdmin";

export default async function handler(req, res) {
  // === VALIDATION DE LA M√âTHODE HTTP ===
  // Seules les requ√™tes GET sont accept√©es pour la v√©rification du statut
  if (req.method !== "GET") {
    console.log("‚ùå M√©thode non autoris√©e pour premium-status:", req.method);
    return res.status(405).json({
      message: "Method not allowed",
      allowed: "GET",
      received: req.method,
    });
  }

  try {
    // === EXTRACTION ET VALIDATION DES PARAM√àTRES ===
    const { userId } = req.query;

    // V√©rification de la pr√©sence de l'ID utilisateur
    if (!userId) {
      console.log("‚ùå ID utilisateur manquant pour v√©rification premium");
      return res.status(400).json({
        error: "ID utilisateur requis",
        parameter: "userId",
      });
    }

    console.log("üîç V√©rification statut premium pour utilisateur:", userId);

    // === R√âCUP√âRATION DES DONN√âES PREMIUM ===
    // Requ√™te pour obtenir les informations premium de l'utilisateur
    const { data: userData, error } = await supabaseAdmin
      .from("user") // Table des profils utilisateurs
      .select("is_premium, premium_expires_at") // Champs li√©s au premium
      .eq("id", userId) // Filtrage par ID utilisateur
      .single(); // Un seul r√©sultat attendu

    // Gestion des erreurs de base de donn√©es
    if (error) {
      console.error("‚ùå Erreur r√©cup√©ration statut premium:", error);

      // Gestion sp√©cifique si l'utilisateur n'existe pas
      if (error.code === "PGRST116") {
        return res.status(404).json({
          error: "Utilisateur non trouv√©",
          userId: userId,
        });
      }

      return res.status(500).json({
        error: "Erreur serveur lors de la v√©rification du statut",
        details: error.message,
      });
    }

    // === V√âRIFICATION ET GESTION DE L'EXPIRATION ===
    let isPremium = userData?.is_premium || false; // Statut premium actuel
    let expirationInfo = userData?.premium_expires_at || null;

    // Si l'utilisateur est premium ET a une date d'expiration
    if (isPremium && userData.premium_expires_at) {
      const expiresAt = new Date(userData.premium_expires_at);
      const now = new Date();

      console.log("üìÖ V√©rification expiration:", {
        expires_at: expiresAt.toISOString(),
        current_time: now.toISOString(),
        is_expired: now > expiresAt,
      });

      // Si l'abonnement a expir√©
      if (now > expiresAt) {
        console.log("‚è∞ Abonnement premium expir√©, mise √† jour du statut");

        // === MISE √Ä JOUR AUTOMATIQUE DU STATUT ===
        // D√©sactivation du premium dans la base de donn√©es
        const { error: updateError } = await supabaseAdmin
          .from("user")
          .update({ is_premium: false }) // Suppression du statut premium
          .eq("id", userId);

        if (updateError) {
          console.error("‚ùå Erreur mise √† jour statut expir√©:", updateError);
          // On continue m√™me en cas d'erreur pour retourner le statut correct
        } else {
          console.log("‚úÖ Statut premium mis √† jour apr√®s expiration");
        }

        isPremium = false; // Mise √† jour locale pour la r√©ponse
      }
    }

    // === RETOUR DU STATUT PREMIUM ===
    const response = {
      is_premium: isPremium,
      premium_expires_at: expirationInfo,
      checked_at: new Date().toISOString(), // Timestamp de v√©rification
      user_id: userId, // Confirmation de l'utilisateur v√©rifi√©
    };

    console.log("‚úÖ Statut premium v√©rifi√©:", response);

    res.status(200).json(response);
  } catch (error) {
    // === GESTION GLOBALE DES ERREURS ===
    console.error("üí• Erreur g√©n√©rale v√©rification premium:", error);
    return res.status(500).json({
      error: "Erreur serveur interne",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
}
